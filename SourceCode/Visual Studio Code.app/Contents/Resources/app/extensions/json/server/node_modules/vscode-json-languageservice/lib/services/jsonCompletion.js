(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'vscode-languageserver-types', 'vscode-nls'], factory);
    }
})(function (require, exports) {
    /*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
    'use strict';
    var vscode_languageserver_types_1 = require('vscode-languageserver-types');
    var nls = require('vscode-nls');
    var localize = nls.loadMessageBundle();
    var JSONCompletion = (function () {
        function JSONCompletion(schemaService, contributions, promiseConstructor) {
            if (contributions === void 0) { contributions = []; }
            this.templateVarIdCounter = 0;
            this.schemaService = schemaService;
            this.contributions = contributions;
            this.promise = promiseConstructor || Promise;
        }
        JSONCompletion.prototype.doResolve = function (item) {
            for (var i = this.contributions.length - 1; i >= 0; i--) {
                if (this.contributions[i].resolveCompletion) {
                    var resolver = this.contributions[i].resolveCompletion(item);
                    if (resolver) {
                        return resolver;
                    }
                }
            }
            return this.promise.resolve(item);
        };
        JSONCompletion.prototype.doComplete = function (document, position, doc) {
            var _this = this;
            var offset = document.offsetAt(position);
            var node = doc.getNodeFromOffsetEndInclusive(offset);
            var currentWord = this.getCurrentWord(document, offset);
            var overwriteRange = null;
            var filterText = void 0;
            var result = {
                items: [],
                isIncomplete: false
            };
            if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {
                overwriteRange = vscode_languageserver_types_1.Range.create(document.positionAt(node.start), document.positionAt(node.end));
                filterText = document.getText().substring(node.start, offset);
            }
            else {
                overwriteRange = vscode_languageserver_types_1.Range.create(document.positionAt(offset - currentWord.length), position);
                filterText = document.getText().substring(offset - currentWord.length, offset);
            }
            var proposed = {};
            var collector = {
                add: function (suggestion) {
                    if (!proposed[suggestion.label]) {
                        proposed[suggestion.label] = true;
                        if (overwriteRange) {
                            suggestion.textEdit = vscode_languageserver_types_1.TextEdit.replace(overwriteRange, suggestion.insertText);
                        }
                        result.items.push(suggestion);
                    }
                },
                setAsIncomplete: function () {
                    result.isIncomplete = true;
                },
                error: function (message) {
                    console.error(message);
                },
                log: function (message) {
                    console.log(message);
                },
                getNumberOfProposals: function () {
                    return result.items.length;
                }
            };
            return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {
                var collectionPromises = [];
                var addValue = true;
                var currentKey = '';
                var currentProperty = null;
                if (node) {
                    if (node.type === 'string') {
                        var stringNode = node;
                        if (stringNode.isKey) {
                            addValue = !(node.parent && (node.parent.value));
                            currentProperty = node.parent ? node.parent : null;
                            currentKey = document.getText().substring(node.start + 1, node.end - 1);
                            if (node.parent) {
                                node = node.parent.parent;
                            }
                        }
                    }
                }
                // proposals for properties
                if (node && node.type === 'object') {
                    // don't suggest keys when the cursor is just before the opening curly brace
                    if (node.start === offset) {
                        return result;
                    }
                    // don't suggest properties that are already present
                    var properties = node.properties;
                    properties.forEach(function (p) {
                        if (!currentProperty || currentProperty !== p) {
                            proposed[p.key.value] = true;
                        }
                    });
                    var isLast_1 = properties.length === 0 || offset >= properties[properties.length - 1].start;
                    if (schema) {
                        // property proposals with schema
                        _this.getPropertyCompletions(schema, doc, node, addValue, isLast_1, collector);
                    }
                    else {
                        // property proposals without schema
                        _this.getSchemaLessPropertyCompletions(doc, node, currentKey, currentWord, isLast_1, collector);
                    }
                    var location_1 = node.getPath();
                    _this.contributions.forEach(function (contribution) {
                        var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, isLast_1, collector);
                        if (collectPromise) {
                            collectionPromises.push(collectPromise);
                        }
                    });
                    if ((!schema && currentWord.length > 0 && document.getText().charAt(offset - currentWord.length - 1) !== '"')) {
                        collector.add({ kind: 10 /* Property */, label: _this.getLabelForValue(currentWord), insertText: _this.getInsertTextForProperty(currentWord, null, false, isLast_1), documentation: '' });
                    }
                }
                // proposals for values
                if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {
                    node = node.parent;
                }
                var types = {};
                if (schema) {
                    // value proposals with schema
                    _this.getValueCompletions(schema, doc, node, offset, collector, types);
                }
                else {
                    // value proposals without schema
                    _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);
                }
                if (!node) {
                    _this.contributions.forEach(function (contribution) {
                        var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);
                        if (collectPromise) {
                            collectionPromises.push(collectPromise);
                        }
                    });
                }
                else {
                    if ((node.type === 'property') && offset > node.colonOffset) {
                        var parentKey_1 = node.key.value;
                        var valueNode = node.value;
                        if (!valueNode || offset <= valueNode.end) {
                            var location_2 = node.parent.getPath();
                            _this.contributions.forEach(function (contribution) {
                                var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_1, collector);
                                if (collectPromise) {
                                    collectionPromises.push(collectPromise);
                                }
                            });
                        }
                    }
                }
                return _this.promise.all(collectionPromises).then(function () {
                    if (collector.getNumberOfProposals() === 0) {
                        _this.addFillerValueCompletions(types, collector);
                    }
                    return result;
                });
            });
        };
        JSONCompletion.prototype.getPropertyCompletions = function (schema, doc, node, addValue, isLast, collector) {
            var _this = this;
            var matchingSchemas = [];
            doc.validate(schema.schema, matchingSchemas, node.start);
            matchingSchemas.forEach(function (s) {
                if (s.node === node && !s.inverted) {
                    var schemaProperties_1 = s.schema.properties;
                    if (schemaProperties_1) {
                        Object.keys(schemaProperties_1).forEach(function (key) {
                            var propertySchema = schemaProperties_1[key];
                            collector.add({ kind: 10 /* Property */, label: key, insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, isLast), filterText: _this.getFilterTextForValue(key), documentation: propertySchema.description || '' });
                        });
                    }
                }
            });
        };
        JSONCompletion.prototype.getSchemaLessPropertyCompletions = function (doc, node, currentKey, currentWord, isLast, collector) {
            var _this = this;
            var collectCompletionsForSimilarObject = function (obj) {
                obj.properties.forEach(function (p) {
                    var key = p.key.value;
                    collector.add({ kind: 10 /* Property */, label: key, insertText: _this.getInsertTextForValue(key), filterText: _this.getFilterTextForValue(key), documentation: '' });
                });
            };
            if (node.parent) {
                if (node.parent.type === 'property') {
                    // if the object is a property value, check the tree for other objects that hang under a property of the same name
                    var parentKey_2 = node.parent.key.value;
                    doc.visit(function (n) {
                        var p = n;
                        if (n.type === 'property' && n !== node.parent && p.key.value === parentKey_2 && p.value && p.value.type === 'object') {
                            collectCompletionsForSimilarObject(p.value);
                        }
                        return true;
                    });
                }
                else if (node.parent.type === 'array') {
                    // if the object is in an array, use all other array elements as similar objects
                    node.parent.items.forEach(function (n) {
                        if (n.type === 'object' && n !== node) {
                            collectCompletionsForSimilarObject(n);
                        }
                    });
                }
            }
            else if (node.type === 'object') {
                collector.add({ kind: 10 /* Property */, label: '$schema', insertText: this.getInsertTextForProperty('$schema', null, true, isLast), documentation: '', filterText: this.getFilterTextForValue("$schema") });
            }
        };
        JSONCompletion.prototype.getSchemaLessValueCompletions = function (doc, node, offset, document, collector) {
            var _this = this;
            var collectSuggestionsForValues = function (value) {
                if (!value.parent.contains(offset, true)) {
                    collector.add({ kind: _this.getSuggestionKind(value.type), label: _this.getLabelTextForMatchingNode(value, document), insertText: _this.getInsertTextForMatchingNode(value, document), documentation: '' });
                }
                if (value.type === 'boolean') {
                    _this.addBooleanValueCompletion(!value.getValue(), collector);
                }
            };
            if (!node) {
                collector.add({ kind: this.getSuggestionKind('object'), label: 'Empty object', insertText: this.getInsertTextForValue({}), documentation: '' });
                collector.add({ kind: this.getSuggestionKind('array'), label: 'Empty array', insertText: this.getInsertTextForValue([]), documentation: '' });
            }
            else {
                if (node.type === 'property') {
                    var propertyNode = node;
                    if (offset > propertyNode.colonOffset) {
                        var valueNode = propertyNode.value;
                        if (valueNode && (offset > valueNode.end || valueNode.type === 'object' || valueNode.type === 'array')) {
                            return;
                        }
                        // suggest values at the same key
                        var parentKey_3 = propertyNode.key.value;
                        doc.visit(function (n) {
                            var p = n;
                            if (n.type === 'property' && p.key.value === parentKey_3 && p.value) {
                                collectSuggestionsForValues(p.value);
                            }
                            return true;
                        });
                        if (parentKey_3 === '$schema' && node.parent && !node.parent.parent) {
                            this.addDollarSchemaCompletions(collector);
                        }
                    }
                }
                if (node.type === 'array') {
                    if (node.parent && node.parent.type === 'property') {
                        // suggest items of an array at the same key
                        var parentKey_4 = node.parent.key.value;
                        doc.visit(function (n) {
                            var p = n;
                            if (n.type === 'property' && p.key.value === parentKey_4 && p.value && p.value.type === 'array') {
                                (p.value.items).forEach(function (n) {
                                    collectSuggestionsForValues(n);
                                });
                            }
                            return true;
                        });
                    }
                    else {
                        // suggest items in the same array
                        node.items.forEach(function (n) {
                            collectSuggestionsForValues(n);
                        });
                    }
                }
            }
        };
        JSONCompletion.prototype.getValueCompletions = function (schema, doc, node, offset, collector, types) {
            var _this = this;
            if (!node) {
                this.addSchemaValueCompletions(schema.schema, collector, types);
            }
            else {
                var parentKey_5 = null;
                if (node && (node.type === 'property') && offset > node.colonOffset) {
                    var valueNode = node.value;
                    if (valueNode && offset > valueNode.end) {
                        return; // we are past the value node
                    }
                    parentKey_5 = node.key.value;
                    node = node.parent;
                }
                if (node && (parentKey_5 !== null || node.type === 'array')) {
                    var matchingSchemas = [];
                    doc.validate(schema.schema, matchingSchemas, node.start);
                    matchingSchemas.forEach(function (s) {
                        if (s.node === node && !s.inverted && s.schema) {
                            if (s.schema.items) {
                                _this.addSchemaValueCompletions(s.schema.items, collector, types);
                            }
                            if (s.schema.properties) {
                                var propertySchema = s.schema.properties[parentKey_5];
                                if (propertySchema) {
                                    _this.addSchemaValueCompletions(propertySchema, collector, types);
                                }
                            }
                        }
                    });
                    if (parentKey_5 === '$schema' && !node.parent) {
                        this.addDollarSchemaCompletions(collector);
                    }
                    if (types['boolean']) {
                        this.addBooleanValueCompletion(true, collector);
                        this.addBooleanValueCompletion(false, collector);
                    }
                    if (types['null']) {
                        this.addNullValueCompletion(collector);
                    }
                }
            }
        };
        JSONCompletion.prototype.addSchemaValueCompletions = function (schema, collector, types) {
            var _this = this;
            this.addDefaultValueCompletions(schema, collector);
            this.addEnumValueCompletions(schema, collector);
            this.collectTypes(schema, types);
            if (Array.isArray(schema.allOf)) {
                schema.allOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, collector, types); });
            }
            if (Array.isArray(schema.anyOf)) {
                schema.anyOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, collector, types); });
            }
            if (Array.isArray(schema.oneOf)) {
                schema.oneOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, collector, types); });
            }
        };
        JSONCompletion.prototype.addDefaultValueCompletions = function (schema, collector, arrayDepth) {
            var _this = this;
            if (arrayDepth === void 0) { arrayDepth = 0; }
            var hasProposals = false;
            if (schema.default) {
                var type = schema.type;
                var value = schema.default;
                for (var i = arrayDepth; i > 0; i--) {
                    value = [value];
                    type = 'array';
                }
                collector.add({
                    kind: this.getSuggestionKind(type),
                    label: this.getLabelForValue(value),
                    insertText: this.getInsertTextForValue(value),
                    detail: localize('json.suggest.default', 'Default value'),
                });
                hasProposals = true;
            }
            if (Array.isArray(schema.defaultSnippets)) {
                schema.defaultSnippets.forEach(function (s) {
                    var value = s.body;
                    var type = schema.type;
                    for (var i = arrayDepth; i > 0; i--) {
                        value = [value];
                        type = 'array';
                    }
                    var insertText = _this.getInsertTextForSnippetValue(value);
                    collector.add({
                        kind: _this.getSuggestionKind(type),
                        label: s.label || _this.getLabelForSnippetValue(value),
                        documentation: s.description,
                        insertText: insertText,
                        filterText: insertText
                    });
                    hasProposals = true;
                });
            }
            if (!hasProposals && schema.items && !Array.isArray(schema.items)) {
                this.addDefaultValueCompletions(schema.items, collector, arrayDepth + 1);
            }
        };
        JSONCompletion.prototype.addEnumValueCompletions = function (schema, collector) {
            var _this = this;
            if (Array.isArray(schema.enum)) {
                schema.enum.forEach(function (enm) { return collector.add({ kind: _this.getSuggestionKind(schema.type), label: _this.getLabelForValue(enm), insertText: _this.getInsertTextForValue(enm), documentation: '' }); });
            }
        };
        JSONCompletion.prototype.collectTypes = function (schema, types) {
            var type = schema.type;
            if (Array.isArray(type)) {
                type.forEach(function (t) { return types[t] = true; });
            }
            else {
                types[type] = true;
            }
        };
        JSONCompletion.prototype.addFillerValueCompletions = function (types, collector) {
            if (types['object']) {
                collector.add({ kind: this.getSuggestionKind('object'), label: '{}', insertText: this.getInsertTextForGuessedValue({}), detail: localize('defaults.object', 'New object'), documentation: '' });
            }
            if (types['array']) {
                collector.add({ kind: this.getSuggestionKind('array'), label: '[]', insertText: this.getInsertTextForGuessedValue([]), detail: localize('defaults.array', 'New array'), documentation: '' });
            }
        };
        JSONCompletion.prototype.addBooleanValueCompletion = function (value, collector) {
            collector.add({ kind: this.getSuggestionKind('boolean'), label: value ? 'true' : 'false', insertText: this.getInsertTextForValue(value), documentation: '' });
        };
        JSONCompletion.prototype.addNullValueCompletion = function (collector) {
            collector.add({ kind: this.getSuggestionKind('null'), label: 'null', insertText: 'null', documentation: '' });
        };
        JSONCompletion.prototype.addDollarSchemaCompletions = function (collector) {
            var _this = this;
            var schemaIds = this.schemaService.getRegisteredSchemaIds(function (schema) { return schema === 'http' || schema === 'https'; });
            schemaIds.forEach(function (schemaId) { return collector.add({ kind: 9 /* Module */, label: _this.getLabelForValue(schemaId), filterText: JSON.stringify(schemaId), insertText: _this.getInsertTextForValue(schemaId), documentation: '' }); });
        };
        JSONCompletion.prototype.getLabelForValue = function (value) {
            var label = JSON.stringify(value);
            if (label.length > 57) {
                return label.substr(0, 57).trim() + '...';
            }
            return label;
        };
        JSONCompletion.prototype.getFilterTextForValue = function (value) {
            return JSON.stringify(value);
        };
        JSONCompletion.prototype.getLabelForSnippetValue = function (value) {
            var label = JSON.stringify(value);
            label = label.replace(/\{\{|\}\}/g, '');
            if (label.length > 57) {
                return label.substr(0, 57).trim() + '...';
            }
            return label;
        };
        JSONCompletion.prototype.getInsertTextForValue = function (value) {
            var text = JSON.stringify(value, null, '\t');
            if (text === '{}') {
                return '{\n\t{{}}\n}';
            }
            else if (text === '[]') {
                return '[\n\t{{}}\n]';
            }
            text = text.replace(/[\\\{\}]/g, '\\$&');
            return text;
        };
        JSONCompletion.prototype.getInsertTextForSnippetValue = function (value) {
            return JSON.stringify(value, null, '\t');
        };
        JSONCompletion.prototype.getInsertTextForGuessedValue = function (value) {
            var snippet = this.getInsertTextForValue(value);
            switch (typeof value) {
                case 'object':
                    if (value === null) {
                        return '{{null}}';
                    }
                    return snippet;
                case 'string':
                    snippet = snippet.substr(1, snippet.length - 2); // remove quotes
                    snippet = snippet.replace(/^(\w+:.*)$/, String(this.templateVarIdCounter++) + ':$1'); // add pseudo variable id to prevent clash with named snippet variables
                    return '"{{' + snippet + '}}"';
                case 'number':
                case 'integer':
                case 'boolean':
                    return '{{' + snippet + '}}';
            }
            return snippet;
        };
        JSONCompletion.prototype.getSuggestionKind = function (type) {
            if (Array.isArray(type)) {
                var array = type;
                type = array.length > 0 ? array[0] : null;
            }
            if (!type) {
                return 12 /* Value */;
            }
            switch (type) {
                case 'string': return 12 /* Value */;
                case 'object': return 9 /* Module */;
                case 'property': return 10 /* Property */;
                default: return 12 /* Value */;
            }
        };
        JSONCompletion.prototype.getLabelTextForMatchingNode = function (node, document) {
            switch (node.type) {
                case 'array':
                    return '[]';
                case 'object':
                    return '{}';
                default:
                    var content = document.getText().substr(node.start, node.end - node.start);
                    return content;
            }
        };
        JSONCompletion.prototype.getInsertTextForMatchingNode = function (node, document) {
            switch (node.type) {
                case 'array':
                    return this.getInsertTextForValue([]);
                case 'object':
                    return this.getInsertTextForValue({});
                default:
                    var content = document.getText().substr(node.start, node.end - node.start);
                    return content;
            }
        };
        JSONCompletion.prototype.getInsertTextForProperty = function (key, propertySchema, addValue, isLast) {
            var result = this.getInsertTextForValue(key);
            if (!addValue) {
                return result;
            }
            result += ': ';
            if (propertySchema) {
                var defaultVal = propertySchema.default;
                if (typeof defaultVal !== 'undefined') {
                    result = result + this.getInsertTextForGuessedValue(defaultVal);
                }
                else if (propertySchema.enum && propertySchema.enum.length > 0) {
                    result = result + this.getInsertTextForGuessedValue(propertySchema.enum[0]);
                }
                else {
                    var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
                    switch (type) {
                        case 'boolean':
                            result += '{{false}}';
                            break;
                        case 'string':
                            result += '"{{}}"';
                            break;
                        case 'object':
                            result += '{\n\t{{}}\n}';
                            break;
                        case 'array':
                            result += '[\n\t{{}}\n]';
                            break;
                        case 'number':
                        case 'integer':
                            result += '{{0}}';
                            break;
                        case 'null':
                            result += '{{null}}';
                            break;
                        default:
                            return result;
                    }
                }
            }
            else {
                result += '{{}}';
            }
            if (!isLast) {
                result += ',';
            }
            return result;
        };
        JSONCompletion.prototype.getCurrentWord = function (document, offset) {
            var i = offset - 1;
            var text = document.getText();
            while (i >= 0 && ' \t\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1) {
                i--;
            }
            return text.substring(i + 1, offset);
        };
        return JSONCompletion;
    }());
    exports.JSONCompletion = JSONCompletion;
});
//# sourceMappingURL=jsonCompletion.js.map