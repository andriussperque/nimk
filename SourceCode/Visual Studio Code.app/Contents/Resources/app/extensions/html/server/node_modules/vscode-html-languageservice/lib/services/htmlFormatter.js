(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'vscode-languageserver-types', '../beautify/beautify-html'], factory);
    }
})(function (require, exports) {
    /*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
    'use strict';
    var vscode_languageserver_types_1 = require('vscode-languageserver-types');
    var beautify_html_1 = require('../beautify/beautify-html');
    function format(document, range, options) {
        var value = document.getText();
        if (range) {
            var startOffset = document.offsetAt(range.start);
            var endOffset = document.offsetAt(range.end);
            value = value.substring(startOffset, endOffset);
        }
        else {
            range = vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), document.positionAt(value.length));
        }
        var htmlOptions = {
            indent_size: options.insertSpaces ? options.tabSize : 1,
            indent_char: options.insertSpaces ? ' ' : '\t',
            wrap_line_length: getFormatOption(options, 'wrapLineLength', 120),
            unformatted: getTagsFormatOption(options, 'unformatted', void 0),
            indent_inner_html: getFormatOption(options, 'indentInnerHtml', false),
            preserve_newlines: getFormatOption(options, 'preserveNewLines', false),
            max_preserve_newlines: getFormatOption(options, 'maxPreserveNewLines', void 0),
            indent_handlebars: getFormatOption(options, 'indentHandlebars', false),
            end_with_newline: getFormatOption(options, 'endWithNewline', false),
            extra_liners: getTagsFormatOption(options, 'extraLiners', void 0),
        };
        var result = beautify_html_1.html_beautify(value, htmlOptions);
        return [{
                range: range,
                newText: result
            }];
    }
    exports.format = format;
    function getFormatOption(options, key, dflt) {
        if (options && options.hasOwnProperty(key)) {
            var value = options[key];
            if (value !== null) {
                return value;
            }
        }
        return dflt;
    }
    function getTagsFormatOption(options, key, dflt) {
        var list = getFormatOption(options, key, null);
        if (typeof list === 'string') {
            if (list.length > 0) {
                return list.split(',').map(function (t) { return t.trim().toLowerCase(); });
            }
            return [];
        }
        return dflt;
    }
});
//# sourceMappingURL=htmlFormatter.js.map